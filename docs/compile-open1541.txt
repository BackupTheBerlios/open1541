
=======================================
= Compile and Start open1541 Firmware =
=======================================

by Thomas Giesel

Possibly you want to read linux-getting-started.txt or windows-getting-
started.txt to find out how to set up the build environment first.

Compile open1541
================

Now you should be able to compile the project. There are a few environment
variables which influence the make process, one of them is "add_path" which may
contain an additional directory to be added to PATH when invoking the ARM
compiler. If not set from the command line, it contains
$(HOME)/cross/arm-elf-binutils-<version>-gcc-<version>, which is the path were
our Makefile installs the toolchain.

So you can change to directory "make" and call:

> make -s

or

> add_path=somewhere/else/bin make -s

[this must be updated and completed]


2. Simulate using GDB simulator
===============================

Change to directory "open1541/make" and call:

> make simulate -s

This builds the simulator configuration of the software and starts the
emulator arm-elf-run in the current terminal window.

In the terminal window you can see the debug output of the emulated device.
Also UART output is sent to this window.

Let's to the same with the Insight debugger:

> make debug -s

You can click run to start.

3. Bring in on hardware
=======================

[this must be updated and completed]

open1541 comes with a tool called lpcflash which is used to send the software
over UART to the open1541 hardware. It is compiled automatically by our Makefile
when it is needed.

Connect the open1541 board to your computer. You can check the documention in
tools/lpcflash on details about how to do this. Connecting the reset line is not
necessarily needed, I never tested it.

To put your board into the boot loader mode, close the boot loader jumper and
reset it.

...
